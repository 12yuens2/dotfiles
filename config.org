#+Title: Emacs config

* Org mode
Organisation for all of Emacs and life. This section contains all org mode configurations and management. Have a look at [[~/.emacs.d/orguide.org][guide]] for notes on how to use Org.

** Install

#+BEGIN_SRC emacs-lisp
(use-package org
    :ensure t)
#+END_SRC

** Navigation
Change navigation bindings for evil movement.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
    (lambda ()
        (local-set-key (kbd "C-c k") 'outline-previous-heading)
        (local-set-key (kbd "C-c j") 'outline-next-heading)))
#+END_SRC

** Templates

#+BEGIN_SRC emacs-lisp
(setq org-structure-template-alist
    '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
      ("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")))
#+END_SRC

* ELPA packages
All general ELPA packages used that are not in the default Emacs configuration.

** Cask
Project management for smooth packaging.

#+BEGIN_SRC emacs-lisp
(use-package cask
    :ensure t)
#+END_SRC

** Company
Text completion for code, like in an IDE.

#+BEGIN_SRC emacs-lisp
(use-package company
    :ensure t
    :bind ("C-1" . company-mode)
    :config (global-company-mode 1))
#+END_SRC

** Elfeed
Web feed reader.

#+BEGIN_SRC emacs-lisp
(use-package elfeed
    :ensure t
    :bind ("C-x w" . elfeed))
#+END_SRC

*** Elfeed-org
[[https://github.com/remyhonig/elfeed-org][elfeed-org]] allows configuration of Elfeed with an Org file.

#+BEGIN_SRC emacs-lisp
(use-package elfeed-org
    :ensure t
    :config (elfeed-org)
            (setq rmh-elfeed-org-files (list "/.emacs.d/elfeed.org")))
#+END_SRC emacs-lisp

*** Elfeed configuration


** Evil
Vim bindings in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package evil
    :ensure t
    :config (evil-mode 1))
#+END_SRC


** Ivy
Completion mechanism for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package ivy
    :ensure t
    :config (ivy-mode 1))
#+END_SRC

** Linum
Line numbers. Everyone needs line numbers.

#+BEGIN_SRC emacs-lisp
(use-package linum
    :ensure t
    :init (setq linum-format "%d ")
    :config (global-linum-mode 1))
#+END_SRC

** Pallet
Package management with Cask

#+BEGIN_SRC emacs-lisp
(use-package pallet
    :ensure t
    :config (pallet-mode 1))
#+END_SRC

* General configurations
** Environment variables

#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

** Text
Configurations related to text display.

*** Line wrap

#+BEGIN_SRC emacs-lisp
(setq global-visual-line-mode 1)
#+END_SRC

*** Parenthesises
Settings for parenthesis highlighting.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC

*** Spell checking
On the fly spell checking with aspell.
 
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/usr/local/bin/hunspell")
(setq ispell-local-dictionary "en_GB")
(setq ispell-local-dictionary-alist
    '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))

(setq ispell-hunspell-dict-paths-alist '("en_GB" . "~/Library/Spelling/en_GB.aff"))
#+END_SRC

** QoL
Quality of life improvements.

*** Yes/No
Change "yes or no" to "y or n"

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRc

*** Clock

#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(load-theme 'leuven t)
#+END_SRC
