#+Title: Emacs config
This is my personal emacs config. It is written in org to contain notes on the packages and settings used, as well as keeping it all well organised and in an easy to read format. 

* Org mode
Organisation for all of Emacs and life. This section contains all org mode configurations and management. Look at [[~/.emacs.d/orguide.org][guide]] for notes and reminder on how to use Org. 

** Install

#+BEGIN_SRC emacs-lisp
(use-package org
    :ensure t)
#+END_SRC

** Navigation
Change navigation bindings for evil movement.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
    (lambda ()
        (local-set-key (kbd "C-c k") 'outline-previous-heading)
        (local-set-key (kbd "C-c j") 'outline-next-heading)))
#+END_SRC

** Templates

Templates shortcuts for inserting source fragments in Org documents.
#+BEGIN_SRC emacs-lisp
(setq org-structure-template-alist
    '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
      ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
      ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
      ("l" "#+LATEX: " "<literal style=\"latex\">?</literal>")
      ("n" "#+LATEX:\\n" "<literal style=\"latex\">\\n</literal>")
      ("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")))
#+END_SRC

* ELPA packages
All general ELPA packages used that are not in the default Emacs configuration.

** Cask
Project management for smooth packaging.

#+BEGIN_SRC emacs-lisp
(use-package cask
    :ensure t)
#+END_SRC

** Company
Text completion for code, like in an IDE.

#+BEGIN_SRC emacs-lisp
(use-package company
    :ensure t
    :bind ("C-1" . company-mode)
    :config (global-company-mode 1))
#+END_SRC

** Elfeed
Web feed reader.

#+BEGIN_SRC emacs-lisp
(use-package elfeed
    :ensure t
    :bind ("C-x w" . elfeed))
#+END_SRC

*** Elfeed-org
[[https://github.com/remyhonig/elfeed-org][elfeed-org]] allows configuration of Elfeed with an Org file.

**** TODO configuration in progress

#+BEGIN_SRC emacs-lisp
;;(use-package elfeed-org
;;    :ensure t
;;    :config (elfeed-org)
;;            (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+END_SRC emacs-lisp

*** Elfeed configuration
    
** Evil
Vim bindings in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config (evil-mode 1))
#+END_SRC

*** Escape bindings
Bindings to make sure that ~ESC~ actually quits everything, courtesy of [[https://stackoverflow.com/a/10166400]]
#+BEGIN_SRC emacs-lisp
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

*** Evil numbers
Increment and decrement numbers like in Vim.

#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :ensure t
    :bind (:map evil-normal-state-map
                ("C-a" . evil-numbers/inc-at-pt)
                ("C-S-A" . evil-numbers/dec-at-pt)))
#+END_SRC

** Flycheck
On the fly syntax checking. Check [[http://www.flycheck.org/en/latest/languages.html][this]] link to get a list of supported languages. May need to install some language specific syntax checkers.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config (global-flycheck-mode 1))
#+END_SRC

** Ivy
Completion mechanism for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package ivy
    :ensure t
    :config (ivy-mode 1))
#+END_SRC

** Linum
Line numbers. Everyone needs line numbers.

#+BEGIN_SRC emacs-lisp
(use-package linum
    :ensure t
    :init (setq linum-format "%d ")
    :config (global-linum-mode 1))
#+END_SRC

** Magit
Git interface for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

*** Evil magit
Evil keys for magit. ~:init~ snippets sets the evil state that evil-magit will use.

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :ensure t
    :init (setq evil-magit-state 'normal))
#+END_SRC

** Neotree
Tree plugin like NerdTree for Vim.

#+BEGIN_SRC emacs-lisp
(use-package neotree
    :ensure t
    :config 
        (global-set-key (kbd "C-c f") 'neotree-toggle)
        (add-hook 'neotree-mode-hook
            (lambda ()
                (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))))
#+END_SRC

** Pallet
Package management with Cask

#+BEGIN_SRC emacs-lisp
(use-package pallet
    :ensure t
    :config (pallet-mode 1))
#+END_SRC

* General configurations
** Custom functions

*** Config file functions
- ~config~ opens this config file
- ~reconfig~ reloads the config by loading ~init.el~

#+BEGIN_SRC emacs-lisp
  (defun config()
    (interactive) (find-file (expand-file-name "~/.emacs.d/config.org")))

  (defun reconfig()
    (interactive) (load-file (expand-file-name "~/.emacs.d/init.el")))
#+END_SRC

** Environment variables

** Key bindings

*** Unbindings
Unbind following key bindings:
- ~C-z~ from evil-emacs-state to allow for backgrounding on the terminal

#+BEGIN_SRC emacs-lisp
  (dolist (key '("\C-z"))
    (global-unset-key key))
#+END_SRC
   
** Backups
Keep backups in a separate temporary directory to avoid cluttering workspace.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms '((".*" ,temporary-file-directory t)))
#+END_SRC

Automatically delete backups older than one week
#+BEGIN_SRC emacs-lisp
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (fifth (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+END_SRC
** Desktop save
Enable ~desktop-save~ to save Emacs sessions. The desktop is saved in ~\~/.emacs.d/~. 
#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :ensure t
    :init
        (setq desktop-path '("~/.emacs.d/"))
        (setq desktop-dirname "~/.emacs.d/")
        (setq desktop-base-file-name "emacs-desktop")
    :config
        (desktop-save-mode 1)
        (add-to-list 'desktop-globals-to-save 'register-alist))
#+END_SRC

*** TODO Multiple desktops in the future

** Text
Configurations related to text display.

*** Line wrap

#+BEGIN_SRC emacs-lisp
(setq global-visual-line-mode 1)
#+END_SRC

*** Parenthesises
Settings for parenthesis highlighting.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC

*** Spell checking
On the fly spell checking with hunspell.
 
#+BEGIN_SRC emacs-lisp
  (defun set-ispell-path (path)
    (setq ispell-program-name path))

  ;; Condition for setting hunspell path on different OS
  (cond ((eq system-type 'darwin) (set-ispell-path "/usr/Local/Cellar/hunspell/1.6.2/bin/hunspell"))
        ((eq system-type 'gnu/linux) (set-ispell-path "/usr/bin/hunspell")))

  (setq ispell-local-dictionary "en_GB")
  (setq ispell-local-dictionary-alist
        '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))

  ;; Hooks for activating flyspell
  (add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

*** Tabs
Tabs to spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** QoL
Quality of life improvements.

*** Yes/No
Change "yes or no" to "y or n"

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRc

*** Clock

#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC
    
** Theme

#+BEGIN_SRC emacs-lisp
(load-theme 'leuven t)
#+END_SRC

** Other
Other non categorised things

*** Speed type
Typing practice. Use ~speed-type-text~ to type random text and ~speed-type-buffer~ to type current buffer.

#+BEGIN_SRC emacs-lisp
(use-package speed-type
    :ensure t)
#+END_SRC

* Custom modes
Add ~modes/~ directory to load path for custom modes.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/modes")
#+END_SRC

** Promela mode
Syntax highlighting for PROMELA files. 
~promela-mode.el~ taken from https://github.com/fixdpt/promela-mode

#+BEGIN_SRC emacs-lisp
  (require 'promela-mode)
  (add-to-list 'auto-mode-alist '("\\.pml\\'" . promela-mode))
#+END_SRC

** Eprime mode
Syntax highlighting for [[http://www.csplib.org/Languages/EssencePrime/][Essence Prime]]. 
~eprime-mode.el~ taken from https://gist.github.com/jfdm/1172911/d6b817822d2691192c52aaf05c17f24239464cb3

#+BEGIN_SRC emacs-lisp
  (require 'eprime-mode)
  (add-to-list 'auto-mode-alist '("\\.eprime\\'" . eprime-mode))
#+END_SRC

* Languages
** C
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4
                c-default-style "linux")
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode
    ("\\.hs$" . haskell-mode))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Protobuf
#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :ensure t
    :mode("\\.proto" . protobuf-mode))
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :ensure t
    :mode
    ("\\.rb$" . enh-ruby-mode))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :mode
    ("\\.rs$" . rust-mode))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (("\\.yml$" . yaml-mode)
           ("\\.yaml$" . yaml-mode)))
#+END_SRC

